class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
    bool result;
    if(matrix.size() == 0)
    return false;
    if(matrix[0].size() == 0)
        return false;
	int r = matrix.size();//行
	int c = matrix[0].size();//列
	int low = 0;int high = r - 1;
	int mid = (r - 1) / 2;
    if(target < matrix[0][0])
        return false;
	while (low <= high) {
		mid = (low + high) / 2;
		if (target == matrix[mid][0]) {
			result = true;
			return result;
		}
		else if (target > matrix[mid][0]) {
			low = mid + 1;
		}
		else {
			high = mid - 1;
		}
	}

	low = low - 1;
	int lowin = 0;
	high = c - 1;
	int midnew;
	while (lowin <= high) {
		midnew = (lowin + high) / 2;
		if (target == matrix[low][midnew]) {
			result = true;
			return result;
		}
		else if (target < matrix[low][midnew]) {
			high = midnew - 1;
		}
		else
			lowin = midnew + 1;
	}
	result = false;
        return result;
    }
};
//注意二分法的思想和写法