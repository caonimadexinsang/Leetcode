/**
 * Definition for singly-linked list with a random pointer.
 * struct RandomListNode {
 *     int label;
 *     RandomListNode *next, *random;
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
 * };
 */
class Solution {
public:
    RandomListNode *copyRandomList(RandomListNode *head) {
        RandomListNode *newhead,*l1, *l2;
	if (head == NULL)
		return NULL;
	for (l1 = head;l1 != NULL;l1 = l1->next->next) {
        l2 = new RandomListNode(l1->label); 
		l2->label = l1->label;
		l2->next = l1->next;
		l1->next = l2;
	}
        newhead = head->next;
	for (l1 = head;l1 != NULL;l1 = l1->next->next) {
		if (l1->random != NULL) {
			l1->next->random = l1->random->next;
		}
	}
	for (l1 = head;l1 != NULL;l1 = l1->next) {
		l2 = l1->next;
		l1->next = l1->next->next;
		if (l2->next != NULL)
			l2->next = l2->next->next;
	}
        return newhead;
    }
};
//注意最后一个for循环，l1 = l1->next，因为一个循环之后，l1->next已经就不是l1原来紧接着的下一个了，而是新的next，就是原来与l1隔了一个的