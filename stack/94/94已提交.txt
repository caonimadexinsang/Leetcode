
 // Definition for a binary tree node.
 /*struct TreeNode {
      int val;
      TreeNode *left;
     TreeNode *right;
     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
  };*/
 
struct TreeNodeWrapper {
	struct TreeNode *pNode;
	bool lVisited;
	bool rVisited;
	TreeNodeWrapper(TreeNode *p) { pNode = p;lVisited = false;rVisited = false;}
};
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> result;
	stack<TreeNodeWrapper*> node_stack;
	node_stack.push(new TreeNodeWrapper(root));
	if (node_stack.top() == NULL)
		return result;
	while (!node_stack.empty()) {
		TreeNodeWrapper *pNode = node_stack.top();
		if (pNode->lVisited || (pNode->pNode != NULL && pNode->pNode->left == NULL) ) {
			node_stack.pop();
             if(pNode->pNode != NULL)
			result.push_back(pNode->pNode->val);
            if(pNode->pNode != NULL)
			if (pNode->pNode->right) {
				node_stack.push(new TreeNodeWrapper(pNode->pNode->right));
			}
			delete pNode;
		}
		else {
            if(pNode->pNode != NULL)
			node_stack.push(new TreeNodeWrapper(pNode->pNode->left));
			pNode->lVisited = true;
		}
	}
        return result;
    }
};