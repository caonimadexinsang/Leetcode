/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    private:map<int, int> hashmap;
public:
    vector<int> findFrequentTreeSum(TreeNode* root) {
	vector<int> result;
	int Max = 0;
	dfs(root);
	for (auto iter = hashmap.begin();iter != hashmap.end();iter++) {
		Max = max(Max,iter->second);
	}
	for (auto iter = hashmap.begin();iter != hashmap.end();iter++) {
		if (iter->second == Max) {
			result.push_back(iter->first);
		}
	}
        return result;
    }
    void dfs(TreeNode* root) {
	if (root == NULL)
		return;
	if (root->left != NULL) {
		dfs(root->left);
		root->val += root->left->val;
	}
	if (root->right != NULL) {
		dfs(root->right);
		root->val += root->right->val;
	}
	hashmap[root->val] ++;
}
};