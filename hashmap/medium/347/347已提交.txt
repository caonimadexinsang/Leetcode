class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        vector<int> result;
		int length = nums.size();
		map<int, int> hash;
		sort(nums.begin(),nums.end());//注意写法
	for (int i = 0;i < length;i++) {
	hash[nums[i]]++;
	}
	priority_queue<pair<int,int>> pri_que;
	for (auto it = hash.begin();it != hash.end();it++) {
	pri_que.push(make_pair(it->second,it->first));
	}
	while (result.size() < k) {
	result.push_back(pri_que.top().second);
	pri_que.pop();
	} 
        return result;
    }
};
//注意怎样使用map容器和priority_queue