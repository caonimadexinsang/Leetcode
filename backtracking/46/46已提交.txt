class Solution {
public:
    void backtracking(vector<int> nums,vector<vector<int>> &result,vector<int> &finded) {
	if (nums.size() == finded.size()) {
		result.push_back(finded);
	}
	else {
		for (int i = 0;i < nums.size();i++) {
			auto iter = finded.begin();
			iter = find(finded.begin(), finded.end(), nums[i]);
			if (iter == finded.end()) {
				finded.push_back(nums[i]);
				backtracking(nums,result,finded);
				finded.pop_back();
			}
		}
	}
}
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> result;
	vector<int> finded;
	backtracking(nums,result,finded);
        return result;
    }
};